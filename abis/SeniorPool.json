{
  "address": "0x38AcCB8158ADb854B281d2A73fC364fFF3d354dA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "capitalProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "configAddress",
          "type": "address"
        }
      ],
      "name": "DobermanConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        }
      ],
      "name": "InterestCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrincipalCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditline",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "PrincipalWrittendown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "capitalProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        }
      ],
      "name": "collectInterestAndPrincipal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract DobermanConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditlineAddress",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "writedownDelta",
          "type": "int256"
        }
      ],
      "name": "distributeLosses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract DobermanConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateToSeniorPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweepFromCompound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweepToCompound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDobermanConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fiduAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawInFidu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d752c0b632668f80e47d63b6f18dffeab8fa5f37d969ed64eb17e821c59517c",
  "receipt": {
    "to": null,
    "from": "0x9460b481366b7462af4f7991d430e5eB97FAAEB5",
    "contractAddress": "0x52Ff4f16ac60a622dFc5C9167484644bAAa738ea",
    "transactionIndex": 19,
    "gasUsed": "3120524",
    "logsBloom": "0x
    "blockHash": "0x1939c0595d24be75bb1e269bf3b797d9f2ea97c987ec6fcad6c1cba74842caef",
    "transactionHash": "0x5d752c0b632668f80e47d63b6f18dffeab8fa5f37d969ed64eb17e821c59517c",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 36266916,
        "transactionHash": "0x5d752c0b632668f80e47d63b6f18dffeab8fa5f37d969ed64eb17e821c59517c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009460b481366b7462af4f7991d430e5eb97faaeb5",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000010a1266accb4000000000000000000000000000000000000000000000000006655b43d7141b0c1000000000000000000000000000000000000000000000ec0336449b768e36745000000000000000000000000000000000000000000000000664513170674fcc1000000000000000000000000000000000000000000000ec03374eaddd3b01b45",
        "logIndex": 96,
        "blockHash": "0x1939c0595d24be75bb1e269bf3b797d9f2ea97c987ec6fcad6c1cba74842caef"
      }
    ],
    "blockNumber": 36266916,
    "cumulativeGasUsed": "6173368",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f5b4f598a720440a2a5244b4c8e3cc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capitalProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"configAddress\",\"type\":\"address\"}],\"name\":\"DobermanConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"name\":\"InterestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrincipalCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"PrincipalWrittendown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capitalProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"collectInterestAndPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract DobermanConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditlineAddress\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"writedownDelta\",\"type\":\"int256\"}],\"name\":\"distributeLosses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract DobermanConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateToSeniorPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepFromCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepToCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDobermanConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fiduAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawInFidu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Doberman\",\"kind\":\"dev\",\"methods\":{\"collectInterestAndPrincipal(address,uint256,uint256)\":{\"params\":{\"from\":\"The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.\",\"interest\":\"the interest amount of USDC to move to the Pool\",\"principal\":\"the principal amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"The amount of USDC to deposit\"}},\"drawdown(address,uint256)\":{\"params\":{\"amount\":\"the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.\",\"to\":\"The address that the USDC should be moved to\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_config\":\"The address of the DobermanConfig contract\",\"owner\":\"The address of who should have the \\\"OWNER_ROLE\\\" of this contract\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.\",\"from\":\"The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.\",\"to\":\"The address that the USDC should be moved to\"}},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256)\":{\"params\":{\"usdcAmount\":\"The amount of USDC to withdraw\"}},\"withdrawInFidu(uint256)\":{\"params\":{\"fiduAmount\":\"The amount of USDC to withdraw in terms of fidu shares\"}}},\"title\":\"Doberman's Pool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectInterestAndPrincipal(address,uint256,uint256)\":{\"notice\":\"Collects `interest` USDC in interest and `principal` in principal from `from` and sends it to the Pool.  This also increases the share price accordingly. A portion is sent to the Doberman Reserve address\"},\"deposit(uint256)\":{\"notice\":\"Deposits `amount` USDC from msg.sender into the Pool, and returns you the equivalent value of FIDU tokens\"},\"drawdown(address,uint256)\":{\"notice\":\"Moves `amount` USDC from the pool, to `to`. This is similar to transferFrom except we sweep any balance we have from compound first and recognize interest. Meant to be called only by the credit desk on drawdown\"},\"initialize(address,address)\":{\"notice\":\"Run only once, on initialization\"},\"sweepFromCompound()\":{\"notice\":\"Moves any USDC from Compound back to the Pool, and recognizes interest earned. This is done automatically on drawdown or withdraw, but can be called manually if necessary. Requirements:  - The caller must be an admin.\"},\"sweepToCompound()\":{\"notice\":\"Moves any USDC still in the Pool to Compound, and tracks the amount internally. This is done to earn interest on latent funds until we have other borrowers who can use it. Requirements:  - The caller must be an admin.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Moves `amount` USDC from `from`, to `to`.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws USDC from the Pool to msg.sender, and burns the equivalent value of FIDU tokens\"},\"withdrawInFidu(uint256)\":{\"notice\":\"Withdraws USDC (denominated in FIDU terms) from the Pool to msg.sender\"}},\"notice\":\"Main entry point for LP's (a.k.a. capital providers)  Handles key logic for depositing and withdrawing funds from the Pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/Pool.sol\":\"Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IBackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBackerRewards {\\n  function allocateRewards(uint256 _interestPaymentAmount) external;\\n\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x5c066b925ddbf4c8d7a9c7feb705100a8521bb638e53235823af8f3850656356\",\"license\":\"MIT\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc63bc7eaaf9c8bfb71c50236442da8d773a20144f3fb72435509c153603a937\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc7da9ab87b0ff9c7f4c9d6071c2e86bdd581c820227ec7203e3bf7e494f2de5a\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf2086c373a79a01688d42eb3b5ed1a2233c6a9226a75bf86ddbb8f6f5276bffa\",\"license\":\"MIT\"},\"contracts/interfaces/IDobermanConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IDobermanConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external returns (address);\\n\\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xec175f23b1ca4f0a5eeeb64dd4d5c59645fecfe25a2d2925a94be14441709df2\",\"license\":\"MIT\"},\"contracts/interfaces/IDobermanFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IDobermanFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function updateDobermanConfig() external;\\n}\\n\",\"keccak256\":\"0x994ea7c5e879dcc6d286fba969968ec6db33602374c8453491825ba48284860e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xad7ebf33181ca25632a0a6d0d4273c43095b5337ed257b08f605204c59a906cf\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xcd54e89fe744c15d259508643db75c1f87c31c6fc39100099065fe9e66138b50\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(address account, uint256[] calldata onlyIdTypes) public view virtual returns (bool);\\n\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n\\n  function updateDobermanConfig() external virtual;\\n}\\n\",\"keccak256\":\"0x8fac87246f8cd02b19a3b8149168a20f713c1eb7f83a73df93b4268bf887cfa3\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 usdcAmount) external virtual;\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function drawdown(address to, uint256 amount) public virtual returns (bool);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a28110740734539b0a3b6452a372e91bd1b848134b6088e7016b901707c28b4\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IPoolTokens is IERC721Upgradeable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe5726725621e6306b3f79602d807a5738d63ad64a77e1db86e201a75427e8ec3\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xef412d63f82bb66aa382db5a4ea33b2d50c0d29002bab8536c968ac35c244d86\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function getLeverageRatio(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\\n\\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x11c48e73b3813a76f52ecc149fcfb7ae03dbcad245557fba57da2e46edf8e95a\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\",\"keccak256\":\"0xbd8d1ee91296df9b944a31d94023937d6dd2893c9fd73e283767653d2b813be5\",\"license\":\"MIT\"},\"contracts/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateDobermanConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xe16a99039e2b5f2472a7c520d53bca63fbd412c4169201f552e5e13a6d120af8\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like ugpradeability, pausability, access control, and re-entrancy guards.\\n * @author Doberman\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeable,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeable\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x6a663caed18f43ee21429662f8ed0adea907b71363bd03d94dbf13708ccf652c\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./DobermanConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport \\\"../../interfaces/IDobermanFactory.sol\\\";\\nimport \\\"../../interfaces/IGo.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the DobermanConfig contract\\n * @author Doberman\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(DobermanConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getSeniorPool(DobermanConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(DobermanConfig config) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(DobermanConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(DobermanConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(DobermanConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getCUSDCContract(DobermanConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(DobermanConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getBackerRewards(DobermanConfig config) internal view returns (IBackerRewards) {\\n    return IBackerRewards(backerRewardsAddress(config));\\n  }\\n\\n  function getDobermanFactory(DobermanConfig config) internal view returns (IDobermanFactory) {\\n    return IDobermanFactory(DobermanFactoryAddress(config));\\n  }\\n\\n  function getGFI(DobermanConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(gfiAddress(config));\\n  }\\n\\n  function getGo(DobermanConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function oneInchAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  function trustedForwarderAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.DobermanConfig));\\n  }\\n\\n  function poolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function poolTokensAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function backerRewardsAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\\n  }\\n\\n  function seniorPoolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function creditDeskAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function DobermanFactoryAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.DobermanFactory));\\n  }\\n\\n  function gfiAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function fiduAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function cusdcContractAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function migratedTranchedPoolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MigratedTranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n}\\n\",\"keccak256\":\"0x65b5c7e41651a3951d54da6ef2edf347211c23bab013924a791e018d39315e5c\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our DobermanConfig contract\\n * @author Doberman\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    DobermanFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder,\\n    CUSDCContract,\\n    DobermanConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation,\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards\\n  }\\n}\\n\",\"keccak256\":\"0x5eed9c04b4012fb99977aa1aa18a6638b4ce03b2de6c61eaff93482a16ee437f\",\"license\":\"MIT\"},\"contracts/protocol/core/DobermanConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IDobermanConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title DobermanConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Doberman\\n */\\n\\ncontract DobermanConfig is BaseUpgradeablePausable {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setTranchedPoolImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TranchedPoolImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setDobermanConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.DobermanConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(\\n    address _initialConfig,\\n    uint256 numbersLength,\\n    uint256 addressesLength\\n  ) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IDobermanConfig initialConfig = IDobermanConfig(_initialConfig);\\n    for (uint256 i = 0; i < numbersLength; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < addressesLength; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) public view returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(hasRole(GO_LISTER_ROLE, _msgSender()), \\\"Must have go-lister role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xaf30cff9542a8440ca1516cc211331438741ab31bc9fae6557e889a8da80a09d\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Doberman\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeable, PausableUpgradeable {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x90b1a2f234a85604daef7d5d8163bda1d3bc7002c14a3957f717796f12255f09\",\"license\":\"MIT\"},\"contracts/protocol/core/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\n\\n/**\\n * @title Doberman's Pool contract\\n * @notice Main entry point for LP's (a.k.a. capital providers)\\n *  Handles key logic for depositing and withdrawing funds from the Pool\\n * @author Doberman\\n */\\n\\ncontract Pool is BaseUpgradeablePausable, IPool {\\n  DobermanConfig public config;\\n  using ConfigHelper for DobermanConfig;\\n  using SafeMath for uint256;\\n\\n  uint256 public compoundBalance;\\n\\n  event DepositMade(address indexed capitalProvider, uint256 amount, uint256 shares);\\n  event WithdrawalMade(address indexed capitalProvider, uint256 userAmount, uint256 reserveAmount);\\n  event TransferMade(address indexed from, address indexed to, uint256 amount);\\n  event InterestCollected(address indexed payer, uint256 poolAmount, uint256 reserveAmount);\\n  event PrincipalCollected(address indexed payer, uint256 amount);\\n  event ReserveFundsCollected(address indexed user, uint256 amount);\\n  event PrincipalWrittendown(address indexed creditline, int256 amount);\\n  event DobermanConfigUpdated(address indexed who, address configAddress);\\n\\n  /**\\n   * @notice Run only once, on initialization\\n   * @param owner The address of who should have the \\\"OWNER_ROLE\\\" of this contract\\n   * @param _config The address of the DobermanConfig contract\\n   */\\n  function initialize(address owner, DobermanConfig _config) public initializer {\\n    require(owner != address(0) && address(_config) != address(0), \\\"Owner and config addresses cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    config = _config;\\n    sharePrice = fiduMantissa();\\n    IERC20withDec usdc = config.getUSDC();\\n    // Sanity check the address\\n    usdc.totalSupply();\\n\\n    // Unlock self for infinite amount\\n    bool success = usdc.approve(address(this), type(uint256).max);\\n    require(success, \\\"Failed to approve USDC\\\");\\n  }\\n\\n  /**\\n   * @notice Deposits `amount` USDC from msg.sender into the Pool, and returns you the equivalent value of FIDU tokens\\n   * @param amount The amount of USDC to deposit\\n   */\\n  function deposit(uint256 amount) external override whenNotPaused withinTransactionLimit(amount) nonReentrant {\\n    require(amount > 0, \\\"Must deposit more than zero\\\");\\n    // Check if the amount of new shares to be added is within limits\\n    uint256 depositShares = getNumShares(amount);\\n    uint256 potentialNewTotalShares = totalShares().add(depositShares);\\n    require(poolWithinLimit(potentialNewTotalShares), \\\"Deposit would put the Pool over the total limit.\\\");\\n    emit DepositMade(msg.sender, amount, depositShares);\\n    bool success = doUSDCTransfer(msg.sender, address(this), amount);\\n    require(success, \\\"Failed to transfer for deposit\\\");\\n\\n    config.getFidu().mintTo(msg.sender, depositShares);\\n  }\\n\\n  /**\\n   * @notice Withdraws USDC from the Pool to msg.sender, and burns the equivalent value of FIDU tokens\\n   * @param usdcAmount The amount of USDC to withdraw\\n   */\\n  function withdraw(uint256 usdcAmount) external override whenNotPaused nonReentrant {\\n    require(usdcAmount > 0, \\\"Must withdraw more than zero\\\");\\n    // This MUST happen before calculating withdrawShares, otherwise the share price\\n    // changes between calculation and burning of Fidu, which creates a asset/liability mismatch\\n    if (compoundBalance > 0) {\\n      _sweepFromCompound();\\n    }\\n    uint256 withdrawShares = getNumShares(usdcAmount);\\n    _withdraw(usdcAmount, withdrawShares);\\n  }\\n\\n  /**\\n   * @notice Withdraws USDC (denominated in FIDU terms) from the Pool to msg.sender\\n   * @param fiduAmount The amount of USDC to withdraw in terms of fidu shares\\n   */\\n  function withdrawInFidu(uint256 fiduAmount) external override whenNotPaused nonReentrant {\\n    require(fiduAmount > 0, \\\"Must withdraw more than zero\\\");\\n    if (compoundBalance > 0) {\\n      _sweepFromCompound();\\n    }\\n    uint256 usdcAmount = getUSDCAmountFromShares(fiduAmount);\\n    uint256 withdrawShares = fiduAmount;\\n    _withdraw(usdcAmount, withdrawShares);\\n  }\\n\\n  /**\\n   * @notice Collects `interest` USDC in interest and `principal` in principal from `from` and sends it to the Pool.\\n   *  This also increases the share price accordingly. A portion is sent to the Doberman Reserve address\\n   * @param from The address to take the USDC from. Implicitly, the Pool\\n   *  must be authorized to move USDC on behalf of `from`.\\n   * @param interest the interest amount of USDC to move to the Pool\\n   * @param principal the principal amount of USDC to move to the Pool\\n   *\\n   * Requirements:\\n   *  - The caller must be the Credit Desk. Not even the owner can call this function.\\n   */\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public override onlyCreditDesk whenNotPaused {\\n    _collectInterestAndPrincipal(from, interest, principal);\\n  }\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta)\\n    external\\n    override\\n    onlyCreditDesk\\n    whenNotPaused\\n  {\\n    if (writedownDelta > 0) {\\n      uint256 delta = usdcToSharePrice(uint256(writedownDelta));\\n      sharePrice = sharePrice.add(delta);\\n    } else {\\n      // If delta is negative, convert to positive uint, and sub from sharePrice\\n      uint256 delta = usdcToSharePrice(uint256(writedownDelta * -1));\\n      sharePrice = sharePrice.sub(delta);\\n    }\\n    emit PrincipalWrittendown(creditlineAddress, writedownDelta);\\n  }\\n\\n  /**\\n   * @notice Moves `amount` USDC from `from`, to `to`.\\n   * @param from The address to take the USDC from. Implicitly, the Pool\\n   *  must be authorized to move USDC on behalf of `from`.\\n   * @param to The address that the USDC should be moved to\\n   * @param amount the amount of USDC to move to the Pool\\n   *\\n   * Requirements:\\n   *  - The caller must be the Credit Desk. Not even the owner can call this function.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public override onlyCreditDesk whenNotPaused returns (bool) {\\n    bool result = doUSDCTransfer(from, to, amount);\\n    require(result, \\\"USDC Transfer failed\\\");\\n    emit TransferMade(from, to, amount);\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Moves `amount` USDC from the pool, to `to`. This is similar to transferFrom except we sweep any\\n   * balance we have from compound first and recognize interest. Meant to be called only by the credit desk on drawdown\\n   * @param to The address that the USDC should be moved to\\n   * @param amount the amount of USDC to move to the Pool\\n   *\\n   * Requirements:\\n   *  - The caller must be the Credit Desk. Not even the owner can call this function.\\n   */\\n  function drawdown(address to, uint256 amount) public override onlyCreditDesk whenNotPaused returns (bool) {\\n    if (compoundBalance > 0) {\\n      _sweepFromCompound();\\n    }\\n    return transferFrom(address(this), to, amount);\\n  }\\n\\n  function assets() public view override returns (uint256) {\\n    ICreditDesk creditDesk = config.getCreditDesk();\\n    return\\n      compoundBalance.add(config.getUSDC().balanceOf(address(this))).add(creditDesk.totalLoansOutstanding()).sub(\\n        creditDesk.totalWritedowns()\\n      );\\n  }\\n\\n  function migrateToSeniorPool() external onlyAdmin {\\n    // Bring back all USDC\\n    if (compoundBalance > 0) {\\n      sweepFromCompound();\\n    }\\n\\n    // Pause deposits/withdrawals\\n    if (!paused()) {\\n      pause();\\n    }\\n\\n    // Remove special priveldges from Fidu\\n    bytes32 minterRole = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 pauserRole = keccak256(\\\"PAUSER_ROLE\\\");\\n    config.getFidu().renounceRole(minterRole, address(this));\\n    config.getFidu().renounceRole(pauserRole, address(this));\\n\\n    // Move all USDC to the SeniorPool\\n    address seniorPoolAddress = config.seniorPoolAddress();\\n    uint256 balance = config.getUSDC().balanceOf(address(this));\\n    bool success = doUSDCTransfer(address(this), seniorPoolAddress, balance);\\n    require(success, \\\"Failed to transfer USDC balance to the senior pool\\\");\\n\\n    // Claim our COMP!\\n    address compoundController = address(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    bytes memory data = abi.encodeWithSignature(\\\"claimComp(address)\\\", address(this));\\n    bytes memory _res;\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (success, _res) = compoundController.call(data);\\n    require(success, \\\"Failed to claim COMP\\\");\\n\\n    // Send our balance of COMP!\\n    address compToken = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\n    data = abi.encodeWithSignature(\\\"balanceOf(address)\\\", address(this));\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (success, _res) = compToken.call(data);\\n    uint256 compBalance = toUint256(_res);\\n    data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", seniorPoolAddress, compBalance);\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (success, _res) = compToken.call(data);\\n    require(success, \\\"Failed to transfer COMP\\\");\\n  }\\n\\n  function toUint256(bytes memory _bytes) internal pure returns (uint256 value) {\\n    assembly {\\n      value := mload(add(_bytes, 0x20))\\n    }\\n  }\\n\\n  /**\\n   * @notice Moves any USDC still in the Pool to Compound, and tracks the amount internally.\\n   * This is done to earn interest on latent funds until we have other borrowers who can use it.\\n   *\\n   * Requirements:\\n   *  - The caller must be an admin.\\n   */\\n  function sweepToCompound() public override onlyAdmin whenNotPaused {\\n    IERC20 usdc = config.getUSDC();\\n    uint256 usdcBalance = usdc.balanceOf(address(this));\\n\\n    ICUSDCContract cUSDC = config.getCUSDCContract();\\n    // Approve compound to the exact amount\\n    bool success = usdc.approve(address(cUSDC), usdcBalance);\\n    require(success, \\\"Failed to approve USDC for compound\\\");\\n\\n    sweepToCompound(cUSDC, usdcBalance);\\n\\n    // Remove compound approval to be extra safe\\n    success = config.getUSDC().approve(address(cUSDC), 0);\\n    require(success, \\\"Failed to approve USDC for compound\\\");\\n  }\\n\\n  /**\\n   * @notice Moves any USDC from Compound back to the Pool, and recognizes interest earned.\\n   * This is done automatically on drawdown or withdraw, but can be called manually if necessary.\\n   *\\n   * Requirements:\\n   *  - The caller must be an admin.\\n   */\\n  function sweepFromCompound() public override onlyAdmin whenNotPaused {\\n    _sweepFromCompound();\\n  }\\n\\n  /* Internal Functions */\\n\\n  function _withdraw(uint256 usdcAmount, uint256 withdrawShares) internal withinTransactionLimit(usdcAmount) {\\n    IFidu fidu = config.getFidu();\\n    // Determine current shares the address has and the shares requested to withdraw\\n    uint256 currentShares = fidu.balanceOf(msg.sender);\\n    // Ensure the address has enough value in the pool\\n    require(withdrawShares <= currentShares, \\\"Amount requested is greater than what this address owns\\\");\\n\\n    uint256 reserveAmount = usdcAmount.div(config.getWithdrawFeeDenominator());\\n    uint256 userAmount = usdcAmount.sub(reserveAmount);\\n\\n    emit WithdrawalMade(msg.sender, userAmount, reserveAmount);\\n    // Send the amounts\\n    bool success = doUSDCTransfer(address(this), msg.sender, userAmount);\\n    require(success, \\\"Failed to transfer for withdraw\\\");\\n    sendToReserve(address(this), reserveAmount, msg.sender);\\n\\n    // Burn the shares\\n    fidu.burnFrom(msg.sender, withdrawShares);\\n  }\\n\\n  function sweepToCompound(ICUSDCContract cUSDC, uint256 usdcAmount) internal {\\n    // Our current design requires we re-normalize by withdrawing everything and recognizing interest gains\\n    // before we can add additional capital to Compound\\n    require(compoundBalance == 0, \\\"Cannot sweep when we already have a compound balance\\\");\\n    require(usdcAmount != 0, \\\"Amount to sweep cannot be zero\\\");\\n    uint256 error = cUSDC.mint(usdcAmount);\\n    require(error == 0, \\\"Sweep to compound failed\\\");\\n    compoundBalance = usdcAmount;\\n  }\\n\\n  function sweepFromCompound(ICUSDCContract cUSDC, uint256 cUSDCAmount) internal {\\n    uint256 cBalance = compoundBalance;\\n    require(cBalance != 0, \\\"No funds on compound\\\");\\n    require(cUSDCAmount != 0, \\\"Amount to sweep cannot be zero\\\");\\n\\n    IERC20 usdc = config.getUSDC();\\n    uint256 preRedeemUSDCBalance = usdc.balanceOf(address(this));\\n    uint256 cUSDCExchangeRate = cUSDC.exchangeRateCurrent();\\n    uint256 redeemedUSDC = cUSDCToUSDC(cUSDCExchangeRate, cUSDCAmount);\\n\\n    uint256 error = cUSDC.redeem(cUSDCAmount);\\n    uint256 postRedeemUSDCBalance = usdc.balanceOf(address(this));\\n    require(error == 0, \\\"Sweep from compound failed\\\");\\n    require(postRedeemUSDCBalance.sub(preRedeemUSDCBalance) == redeemedUSDC, \\\"Unexpected redeem amount\\\");\\n\\n    uint256 interestAccrued = redeemedUSDC.sub(cBalance);\\n    _collectInterestAndPrincipal(address(this), interestAccrued, 0);\\n    compoundBalance = 0;\\n  }\\n\\n  function _collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) internal {\\n    uint256 reserveAmount = interest.div(config.getReserveDenominator());\\n    uint256 poolAmount = interest.sub(reserveAmount);\\n    uint256 increment = usdcToSharePrice(poolAmount);\\n    sharePrice = sharePrice.add(increment);\\n\\n    if (poolAmount > 0) {\\n      emit InterestCollected(from, poolAmount, reserveAmount);\\n    }\\n    if (principal > 0) {\\n      emit PrincipalCollected(from, principal);\\n    }\\n    if (reserveAmount > 0) {\\n      sendToReserve(from, reserveAmount, from);\\n    }\\n    // Gas savings: No need to transfer to yourself, which happens in sweepFromCompound\\n    if (from != address(this)) {\\n      bool success = doUSDCTransfer(from, address(this), principal.add(poolAmount));\\n      require(success, \\\"Failed to collect principal repayment\\\");\\n    }\\n  }\\n\\n  function _sweepFromCompound() internal {\\n    ICUSDCContract cUSDC = config.getCUSDCContract();\\n    sweepFromCompound(cUSDC, cUSDC.balanceOf(address(this)));\\n  }\\n\\n  function updateDobermanConfig() external onlyAdmin {\\n    config = DobermanConfig(config.configAddress());\\n    emit DobermanConfigUpdated(msg.sender, address(config));\\n  }\\n\\n  function fiduMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  function usdcMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(6);\\n  }\\n\\n  function usdcToFidu(uint256 amount) internal pure returns (uint256) {\\n    return amount.mul(fiduMantissa()).div(usdcMantissa());\\n  }\\n\\n  function cUSDCToUSDC(uint256 exchangeRate, uint256 amount) internal pure returns (uint256) {\\n    // See https://compound.finance/docs#protocol-math\\n    // But note, the docs and reality do not agree. Docs imply that that exchange rate is\\n    // scaled by 1e18, but tests and mainnet forking make it appear to be scaled by 1e16\\n    // 1e16 is also what Sheraz at Certik said.\\n    uint256 usdcDecimals = 6;\\n    uint256 cUSDCDecimals = 8;\\n\\n    // We multiply in the following order, for the following reasons...\\n    // Amount in cToken (1e8)\\n    // Amount in USDC (but scaled by 1e16, cause that's what exchange rate decimals are)\\n    // Downscale to cToken decimals (1e8)\\n    // Downscale from cToken to USDC decimals (8 to 6)\\n    return amount.mul(exchangeRate).div(10**(18 + usdcDecimals - cUSDCDecimals)).div(10**2);\\n  }\\n\\n  function totalShares() internal view returns (uint256) {\\n    return config.getFidu().totalSupply();\\n  }\\n\\n  function usdcToSharePrice(uint256 usdcAmount) internal view returns (uint256) {\\n    return usdcToFidu(usdcAmount).mul(fiduMantissa()).div(totalShares());\\n  }\\n\\n  function poolWithinLimit(uint256 _totalShares) internal view returns (bool) {\\n    return\\n      _totalShares.mul(sharePrice).div(fiduMantissa()) <=\\n      usdcToFidu(config.getNumber(uint256(ConfigOptions.Numbers.TotalFundsLimit)));\\n  }\\n\\n  function transactionWithinLimit(uint256 amount) internal view returns (bool) {\\n    return amount <= config.getNumber(uint256(ConfigOptions.Numbers.TransactionLimit));\\n  }\\n\\n  function getNumShares(uint256 amount) internal view returns (uint256) {\\n    return usdcToFidu(amount).mul(fiduMantissa()).div(sharePrice);\\n  }\\n\\n  function getUSDCAmountFromShares(uint256 fiduAmount) internal view returns (uint256) {\\n    return fiduToUSDC(fiduAmount.mul(sharePrice).div(fiduMantissa()));\\n  }\\n\\n  function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\\n    return amount.div(fiduMantissa().div(usdcMantissa()));\\n  }\\n\\n  function sendToReserve(\\n    address from,\\n    uint256 amount,\\n    address userForEvent\\n  ) internal {\\n    emit ReserveFundsCollected(userForEvent, amount);\\n    bool success = doUSDCTransfer(from, config.reserveAddress(), amount);\\n    require(success, \\\"Reserve transfer was not successful\\\");\\n  }\\n\\n  function doUSDCTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (bool) {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    IERC20withDec usdc = config.getUSDC();\\n    return usdc.transferFrom(from, to, amount);\\n  }\\n\\n  modifier withinTransactionLimit(uint256 amount) {\\n    require(transactionWithinLimit(amount), \\\"Amount is over the per-transaction limit\\\");\\n    _;\\n  }\\n\\n  modifier onlyCreditDesk() {\\n    require(msg.sender == config.creditDeskAddress(), \\\"Only the credit desk is allowed to call this function\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x127ff8e4c8817af3bf5222da19502ad4c4f21a810b7f960c4f4517ba9647caeb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061377c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a55760003560e01c806371a97305116100ef578063a217fddf11610092578063a217fddf14610344578063b6b55f251461034c578063b6db75a01461035f578063d30a091114610367578063d547741f1461036f578063e58378bb14610382578063e63ab1e914610397578063f1a80e62146103ac57600080fd5b806371a97305146102d357806371bb0bab146102db57806379502c55146102ee5780638456cb591461030f57806387269729146103175780638836d9021461032157806391d14854146103295780639e4a88e11461033c57600080fd5b806336568abe1161015757806336568abe146102645780633f4ba83a14610277578063485cc9551461027f5780634cbceb2d14610292578063526d81f61461029a57806358031d12146102a25780635c975abb146102b55780636acab9da146102c057600080fd5b806301ffc9a7146101aa578063097616a3146101d257806323b872dd146101e7578063248a9ca3146101fa5780632e1a7d4d1461022b5780632f2ff15d1461023e578063338744bc14610251575b600080fd5b6101bd6101b83660046130f3565b6103b6565b60405190151581526020015b60405180910390f35b6101e56101e0366004612f88565b6103ed565b005b6101bd6101f5366004612fc0565b610583565b61021d6102083660046130b7565b60009081526065602052604090206001015490565b6040519081526020016101c9565b6101e56102393660046130b7565b61067c565b6101e561024c3660046130cf565b6106e2565b6101e561025f366004613038565b61070c565b6101e56102723660046130cf565b6107fd565b6101e5610877565b6101e561028d366004613000565b6108b5565b6101e5610b72565b6101e56110b6565b6101e56102b03660046130b7565b61116d565b60975460ff166101bd565b6101bd6102ce366004613038565b6111d2565b61021d611246565b6101e56102e9366004613063565b6113fc565b6101c454610302906001600160a01b031681565b6040516101c991906131be565b6101e5611455565b61021d6101c35481565b6101e5611491565b6101bd6103373660046130cf565b6114c5565b6101e56114f0565b61021d600081565b6101e561035a3660046130b7565b611739565b6101bd611963565b6101e5611982565b6101e561037d3660046130cf565b611a17565b61021d6000805160206136e783398151915281565b61021d60008051602061372783398151915281565b61021d6101c55481565b60006001600160e01b03198216637965db0b60e01b14806103e757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff161580801561040d5750600054600160ff909116105b806104275750303b158015610427575060005460ff166001145b61044c5760405162461bcd60e51b8152600401610443906132e9565b60405180910390fd5b6000805460ff19166001179055801561046f576000805461ff0019166101001790555b6001600160a01b0382166104c55760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610443565b6104cd611a3c565b6104d5611a63565b6104dd611a96565b6104f56000805160206136e783398151915283611ac4565b61050d60008051602061372783398151915283611ac4565b6105336000805160206137278339815191526000805160206136e7833981519152611ace565b61054b6000805160206136e783398151915280611ace565b801561057f576000805461ff0019169055604051600181526000805160206137078339815191529060200160405180910390a15b5050565b6101c45460009061059c906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b0316146105cc5760405162461bcd60e51b815260040161044390613337565b6105d4611b9b565b60006105e1858585611be1565b9050806106275760405162461bcd60e51b81526020600482015260146024820152731554d110c8151c985b9cd9995c8819985a5b195960621b6044820152606401610443565b836001600160a01b0316856001600160a01b03167f422971e1d1a7c8b68372f65fe1426aef054f0c6290124a929c843c5c019521d68560405161066c91815260200190565b60405180910390a3949350505050565b610684611b9b565b61068c611ce9565b600081116106ac5760405162461bcd60e51b81526004016104439061338c565b6101c554156106bd576106bd611d43565b60006106c882611de3565b90506106d48282611e0c565b506106df600160c955565b50565b6000828152606560205260409020600101546106fd8161207e565b6107078383612088565b505050565b6101c454610722906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b0316146107525760405162461bcd60e51b815260040161044390613337565b61075a611b9b565b600081131561078957600061076e8261210e565b6101c35490915061077f9082612126565b6101c355506107b6565b600061079f61079a836000196135bf565b61210e565b6101c3549091506107b09082612132565b6101c355505b816001600160a01b03167f8c23a9a70a8448cfed7aae767d71bd68857b79de2d189ee6a770619ada8b857a826040516107f191815260200190565b60405180910390a25050565b6001600160a01b038116331461086d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610443565b61057f828261213e565b61088f600080516020613727833981519152336114c5565b6108ab5760405162461bcd60e51b815260040161044390613255565b6108b36121a5565b565b600054610100900460ff16158080156108d55750600054600160ff909116105b806108ef5750303b1580156108ef575060005460ff166001145b61090b5760405162461bcd60e51b8152600401610443906132e9565b6000805460ff19166001179055801561092e576000805461ff0019166101001790555b6001600160a01b0383161580159061094e57506001600160a01b03821615155b6109ad5760405162461bcd60e51b815260206004820152602a60248201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6044820152697420626520656d70747960b01b6064820152608401610443565b6109b6836103ed565b6101c480546001600160a01b0319166001600160a01b0384161790556109da6121f1565b6101c3556101c4546000906109f7906001600160a01b03166121ff565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3257600080fd5b505afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a919061311b565b5060405163095ea7b360e01b81526000906001600160a01b0383169063095ea7b390610a9e903090600019906004016131d2565b602060405180830381600087803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af09190613097565b905080610b385760405162461bcd60e51b81526020600482015260166024820152754661696c656420746f20617070726f7665205553444360501b6044820152606401610443565b50508015610707576000805461ff0019169055604051600181526000805160206137078339815191529060200160405180910390a1505050565b610b7a611963565b610b965760405162461bcd60e51b815260040161044390613451565b6101c55415610ba757610ba7611491565b60975460ff16610bb957610bb9611455565b6101c4547f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69060008051602061372783398151915290610c01906001600160a01b031661220a565b604051631b2b455f60e11b8152600481018490523060248201526001600160a01b0391909116906336568abe90604401600060405180830381600087803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b50506101c454610c7a92506001600160a01b0316905061220a565b604051631b2b455f60e11b8152600481018390523060248201526001600160a01b0391909116906336568abe90604401600060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b50506101c45460009250610cf591506001600160a01b0316612215565b6101c454909150600090610d11906001600160a01b03166121ff565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d3c91906131be565b60206040518083038186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c919061311b565b90506000610d9b308484611be1565b905080610e055760405162461bcd60e51b815260206004820152603260248201527f4661696c656420746f207472616e7366657220555344432062616c616e6365206044820152711d1bc81d1a19481cd95b9a5bdc881c1bdbdb60721b6064820152608401610443565b604051733d9819210a31b4961b30ef54be2aed79b9c9cd3b90600090610e2f9030906024016131be565b60408051601f198184030181529181526020820180516001600160e01b03166374d7814960e11b179052519091506060906001600160a01b03841690610e76908490613133565b6000604051808303816000865af19150503d8060008114610eb3576040519150601f19603f3d011682016040523d82523d6000602084013e610eb8565b606091505b50909450905083610f025760405162461bcd60e51b815260206004820152601460248201527304661696c656420746f20636c61696d20434f4d560641b6044820152606401610443565b60405173c00e94cb662c3520282e6f5717214004a7f2688890610f299030906024016131be565b60408051601f198184030181529181526020820180516001600160e01b03166370a0823160e01b179052519093506001600160a01b03821690610f6d908590613133565b6000604051808303816000865af19150503d8060008114610faa576040519150601f19603f3d011682016040523d82523d6000602084013e610faf565b606091505b5090955091506000610fc2836020015190565b90508781604051602401610fd79291906131d2565b60408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052519094506001600160a01b0383169061101b908690613133565b6000604051808303816000865af19150503d8060008114611058576040519150601f19603f3d011682016040523d82523d6000602084013e61105d565b606091505b509096509250856110aa5760405162461bcd60e51b815260206004820152601760248201527604661696c656420746f207472616e7366657220434f4d5604c1b6044820152606401610443565b50505050505050505050565b600054610100900460ff16158080156110d65750600054600160ff909116105b806110f05750303b1580156110f0575060005460ff166001145b61110c5760405162461bcd60e51b8152600401610443906132e9565b6000805460ff19166001179055801561112f576000805461ff0019166101001790555b611137611a63565b80156106df576000805461ff0019169055604051600181526000805160206137078339815191529060200160405180910390a150565b611175611b9b565b61117d611ce9565b6000811161119d5760405162461bcd60e51b81526004016104439061338c565b6101c554156111ae576111ae611d43565b60006111b98261222d565b9050816111c68282611e0c565b50506106df600160c955565b6101c4546000906111eb906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b03161461121b5760405162461bcd60e51b815260040161044390613337565b611223611b9b565b6101c5541561123457611234611d43565b61123f308484610583565b9392505050565b6101c4546000908190611261906001600160a01b0316612251565b90506113f6816001600160a01b031663a6f4487e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d7919061311b565b6113f0836001600160a01b031663ed80c8506040518163ffffffff1660e01b815260040160206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b919061311b565b6101c4546113ea90611365906001600160a01b03166121ff565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161139091906131be565b60206040518083038186803b1580156113a857600080fd5b505afa1580156113bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e0919061311b565b6101c55490612126565b90612126565b90612132565b91505090565b6101c454611412906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b0316146114425760405162461bcd60e51b815260040161044390613337565b61144a611b9b565b61070783838361225c565b61146d600080516020613727833981519152336114c5565b6114895760405162461bcd60e51b815260040161044390613255565b6108b36123e3565b611499611963565b6114b55760405162461bcd60e51b815260040161044390613451565b6114bd611b9b565b6108b3611d43565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6114f8611963565b6115145760405162461bcd60e51b815260040161044390613451565b61151c611b9b565b6101c454600090611535906001600160a01b03166121ff565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161156591906131be565b60206040518083038186803b15801561157d57600080fd5b505afa158015611591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b5919061311b565b6101c4549091506000906115d1906001600160a01b0316612420565b90506000836001600160a01b031663095ea7b383856040518363ffffffff1660e01b81526004016116039291906131d2565b602060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116559190613097565b9050806116745760405162461bcd60e51b81526004016104439061340e565b61167e828461242b565b6101c454611694906001600160a01b03166121ff565b6001600160a01b031663095ea7b38360006040518363ffffffff1660e01b81526004016116c29291906131d2565b602060405180830381600087803b1580156116dc57600080fd5b505af11580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117149190613097565b9050806117335760405162461bcd60e51b81526004016104439061340e565b50505050565b611741611b9b565b8061174b81612586565b6117675760405162461bcd60e51b8152600401610443906132a1565b61176f611ce9565b600082116117bf5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610443565b60006117ca83611de3565b905060006117da826113ea61260d565b90506117e581612696565b61184a5760405162461bcd60e51b815260206004820152603060248201527f4465706f73697420776f756c64207075742074686520506f6f6c206f7665722060448201526f3a3432903a37ba30b6103634b6b4ba1760811b6064820152608401610443565b604080518581526020810184905233917f0b05f0d1cd0819f155b8a61f60baf7767c1ee49d04aeaab701df236140eb93f9910160405180910390a26000611892333087611be1565b9050806118e15760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f207472616e7366657220666f72206465706f73697400006044820152606401610443565b6101c4546118f7906001600160a01b031661220a565b6001600160a01b031663449a52f833856040518363ffffffff1660e01b81526004016119249291906131d2565b600060405180830381600087803b15801561193e57600080fd5b505af1158015611952573d6000803e3d6000fd5b5050505050505061057f600160c955565b600061197d6000805160206136e7833981519152336114c5565b905090565b61198a611963565b6119a65760405162461bcd60e51b815260040161044390613451565b6101c4546119bc906001600160a01b0316612732565b6101c480546001600160a01b0319166001600160a01b0392909216918217905560405133917f8d003bc2e3965bd9d92389a8ae0ef8c601fa211ba9378150dde7dc3cf38c3a3691611a0d91906131be565b60405180910390a2565b600082815260656020526040902060010154611a328161207e565b610707838361213e565b600054610100900460ff166108b35760405162461bcd60e51b8152600401610443906133c3565b600054610100900460ff16611a8a5760405162461bcd60e51b8152600401610443906133c3565b6097805460ff19169055565b600054610100900460ff16611abd5760405162461bcd60e51b8152600401610443906133c3565b600160c955565b61057f8282612088565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b03821663b93f9b0a60035b6040518263ffffffff1660e01b8152600401611b4b91815260200190565b60206040518083038186803b158015611b6357600080fd5b505afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190612fa4565b60975460ff16156108b35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610443565b60006001600160a01b038316611c395760405162461bcd60e51b815260206004820152601a60248201527f43616e27742073656e6420746f207a65726f20616464726573730000000000006044820152606401610443565b6101c454600090611c52906001600160a01b03166121ff565b6040516323b872dd60e01b81526001600160a01b038781166004830152868116602483015260448201869052919250908216906323b872dd90606401602060405180830381600087803b158015611ca857600080fd5b505af1158015611cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce09190613097565b95945050505050565b600260c9541415611d3c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610443565b600260c955565b6101c454600090611d5c906001600160a01b0316612420565b90506106df81826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d8e91906131be565b60206040518083038186803b158015611da657600080fd5b505afa158015611dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dde919061311b565b61274a565b60006103e76101c354611e06611df76121f1565b611e0086612a9c565b90612ab7565b90612ac3565b81611e1681612586565b611e325760405162461bcd60e51b8152600401610443906132a1565b6101c454600090611e4b906001600160a01b031661220a565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611e7b91906131be565b60206040518083038186803b158015611e9357600080fd5b505afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb919061311b565b905080841115611f3d5760405162461bcd60e51b815260206004820152603760248201527f416d6f756e74207265717565737465642069732067726561746572207468616e604482015276207768617420746869732061646472657373206f776e7360481b6064820152608401610443565b6101c454600090611f6190611f5a906001600160a01b0316612acf565b8790612ac3565b90506000611f6f8783612132565b604080518281526020810185905291925033917f2d4d49c3e017b8235c908cbaa83a2431a08f3b950712696ece2088964fd399f0910160405180910390a26000611fba303384611be1565b9050806120095760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f207472616e7366657220666f72207769746864726177006044820152606401610443565b612014308433612b51565b60405163079cc67960e41b81526001600160a01b038616906379cc6790906120429033908b906004016131d2565b600060405180830381600087803b15801561205c57600080fd5b505af1158015612070573d6000803e3d6000fd5b505050505050505050505050565b6106df8133612c14565b61209282826114c5565b61057f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556120ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006103e761211b61260d565b611e06611df76121f1565b600061123f828461349c565b600061123f8284613661565b61214882826114c5565b1561057f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6121ad612c6d565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516121e791906131be565b60405180910390a1565b600061197d6012600a613517565b60006103e782612cb6565b60006103e782612cce565b60006001600160a01b03821663b93f9b0a600e611b2d565b60006103e761224c61223d6121f1565b6101c354611e06908690612ab7565b612ce6565b60006103e782611b19565b6101c45460009061228090612279906001600160a01b0316612d05565b8490612ac3565b9050600061228e8483612132565b9050600061229b8261210e565b6101c3549091506122ac9082612126565b6101c35581156122fb5760408051838152602081018590526001600160a01b038816917f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e2161910160405180910390a25b831561234557856001600160a01b03167f8295ad220549851bab232c2a7ae2e3c53a63d2294602bc85f8d8af108778a37e8560405161233c91815260200190565b60405180910390a25b821561235657612356868488612b51565b6001600160a01b03861630146123db57600061237c87306123778887612126565b611be1565b9050806123d95760405162461bcd60e51b815260206004820152602560248201527f4661696c656420746f20636f6c6c656374207072696e636970616c20726570616044820152641e5b595b9d60da1b6064820152608401610443565b505b505050505050565b6123eb611b9b565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121da3390565b60006103e782612d1d565b6101c554156124995760405162461bcd60e51b815260206004820152603460248201527f43616e6e6f74207377656570207768656e20776520616c72656164792068617660448201527365206120636f6d706f756e642062616c616e636560601b6064820152608401610443565b806124b65760405162461bcd60e51b81526004016104439061321e565b60405163140e25ad60e31b8152600481018290526000906001600160a01b0384169063a0712d6890602401602060405180830381600087803b1580156124fb57600080fd5b505af115801561250f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612533919061311b565b9050801561257e5760405162461bcd60e51b815260206004820152601860248201527714ddd9595c081d1bc818dbdb5c1bdd5b990819985a5b195960421b6044820152606401610443565b506101c55550565b6101c454604051631f8ac6cb60e31b8152600060048201819052916001600160a01b03169063fc5636589060240160206040518083038186803b1580156125cc57600080fd5b505afa1580156125e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612604919061311b565b90911115919050565b6101c454600090612626906001600160a01b031661220a565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d919061311b565b6101c454604051631f8ac6cb60e31b81526001600482015260009161271f916001600160a01b039091169063fc5636589060240160206040518083038186803b1580156126e257600080fd5b505afa1580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a919061311b565b612a9c565b61272a61223d6121f1565b111592915050565b60006001600160a01b03821663b93f9b0a600b611b2d565b6101c554806127925760405162461bcd60e51b8152602060048201526014602482015273139bc8199d5b991cc81bdb8818dbdb5c1bdd5b9960621b6044820152606401610443565b816127af5760405162461bcd60e51b81526004016104439061321e565b6101c4546000906127c8906001600160a01b03166121ff565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016127f891906131be565b60206040518083038186803b15801561281057600080fd5b505afa158015612824573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612848919061311b565b90506000856001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561288757600080fd5b505af115801561289b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bf919061311b565b905060006128cd8287612d35565b60405163db006a7560e01b8152600481018890529091506000906001600160a01b0389169063db006a7590602401602060405180830381600087803b15801561291557600080fd5b505af1158015612929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294d919061311b565b90506000856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161297d91906131be565b60206040518083038186803b15801561299557600080fd5b505afa1580156129a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cd919061311b565b90508115612a1d5760405162461bcd60e51b815260206004820152601a60248201527f53776565702066726f6d20636f6d706f756e64206661696c65640000000000006044820152606401610443565b82612a288287612132565b14612a705760405162461bcd60e51b8152602060048201526018602482015277155b995e1c1958dd1959081c995919595b48185b5bdd5b9d60421b6044820152606401610443565b6000612a7c8489612132565b9050612a8a3082600061225c565b505060006101c5555050505050505050565b60006103e7612aa9612d6e565b611e06612ab46121f1565b85905b600061123f8284613642565b600061123f82846134b4565b60006001600160a01b03821663fc56365860045b6040518263ffffffff1660e01b8152600401612b0191815260200190565b60206040518083038186803b158015612b1957600080fd5b505afa158015612b2d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e7919061311b565b806001600160a01b03167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb83604051612b8c91815260200190565b60405180910390a26101c454600090612bb9908590612bb3906001600160a01b0316612d7c565b85611be1565b9050806117335760405162461bcd60e51b815260206004820152602360248201527f52657365727665207472616e7366657220776173206e6f742073756363657373604482015262199d5b60ea1b6064820152608401610443565b612c1e82826114c5565b61057f57612c2b81612d94565b612c36836020612da6565b604051602001612c4792919061314f565b60408051601f198184030181529082905262461bcd60e51b8252610443916004016131eb565b60975460ff166108b35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610443565b60006001600160a01b03821663b93f9b0a6005611b2d565b60006001600160a01b03821663b93f9b0a6004611b2d565b60006103e7612cfe612cf6612d6e565b611e066121f1565b8390612ac3565b60006001600160a01b03821663fc5636586003612ae3565b60006001600160a01b03821663b93f9b0a600a611b2d565b600060066008611ce06064611e0683612d4f86601261349c565b612d599190613661565b612d6490600a613517565b611e06888a612ab7565b600061197d6006600a613517565b60006001600160a01b03821663b93f9b0a6006611b2d565b60606103e76001600160a01b03831660145b60606000612db5836002613642565b612dc090600261349c565b67ffffffffffffffff811115612de657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e10576020820181803683370190505b509050600360fc1b81600081518110612e3957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e7657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612e9a846002613642565b612ea590600161349c565b90505b6001811115612f39576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612ee757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612f0b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612f32816136a4565b9050612ea8565b50831561123f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610443565b600060208284031215612f99578081fd5b813561123f816136d1565b600060208284031215612fb5578081fd5b815161123f816136d1565b600080600060608486031215612fd4578182fd5b8335612fdf816136d1565b92506020840135612fef816136d1565b929592945050506040919091013590565b60008060408385031215613012578182fd5b823561301d816136d1565b9150602083013561302d816136d1565b809150509250929050565b6000806040838503121561304a578182fd5b8235613055816136d1565b946020939093013593505050565b600080600060608486031215613077578283fd5b8335613082816136d1565b95602085013595506040909401359392505050565b6000602082840312156130a8578081fd5b8151801515811461123f578182fd5b6000602082840312156130c8578081fd5b5035919050565b600080604083850312156130e1578182fd5b82359150602083013561302d816136d1565b600060208284031215613104578081fd5b81356001600160e01b03198116811461123f578182fd5b60006020828403121561312c578081fd5b5051919050565b60008251613145818460208701613678565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351613181816017850160208801613678565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131b2816028840160208801613678565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602081526000825180602084015261320a816040850160208701613678565b601f01601f19169190910160400192915050565b6020808252601e908201527f416d6f756e7420746f2073776565702063616e6e6f74206265207a65726f0000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b60208082526028908201527f416d6f756e74206973206f76657220746865207065722d7472616e73616374696040820152671bdb881b1a5b5a5d60c21b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526035908201527f4f6e6c792074686520637265646974206465736b20697320616c6c6f776564206040820152743a379031b0b636103a3434b990333ab731ba34b7b760591b606082015260800190565b6020808252601c908201527f4d757374207769746864726177206d6f7265207468616e207a65726f00000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526023908201527f4661696c656420746f20617070726f7665205553444320666f7220636f6d706f6040820152621d5b9960ea1b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b600082198211156134af576134af6136bb565b500190565b6000826134cf57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561350f5781600019048211156134f5576134f56136bb565b8085161561350257918102915b93841c93908002906134d9565b509250929050565b600061123f838360008261352d575060016103e7565b8161353a575060006103e7565b8160018114613550576002811461355a57613576565b60019150506103e7565b60ff84111561356b5761356b6136bb565b50506001821b6103e7565b5060208310610133831016604e8410600b8410161715613599575081810a6103e7565b6135a383836134d4565b80600019048211156135b7576135b76136bb565b029392505050565b60006001600160ff1b03818413828413808216868404861116156135e5576135e56136bb565b600160ff1b84871282811687830589121615613603576136036136bb565b85871292508782058712848416161561361e5761361e6136bb565b87850587128184161615613634576136346136bb565b505050929093029392505050565b600081600019048311821515161561365c5761365c6136bb565b500290565b600082821015613673576136736136bb565b500390565b60005b8381101561369357818101518382015260200161367b565b838111156117335750506000910152565b6000816136b3576136b36136bb565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146106df57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212200374c6e758a764be18f8d189b4b192ce5626dcfd8ba2b492564336e4f1e313fd64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a55760003560e01c806371a97305116100ef578063a217fddf11610092578063a217fddf14610344578063b6b55f251461034c578063b6db75a01461035f578063d30a091114610367578063d547741f1461036f578063e58378bb14610382578063e63ab1e914610397578063f1a80e62146103ac57600080fd5b806371a97305146102d357806371bb0bab146102db57806379502c55146102ee5780638456cb591461030f57806387269729146103175780638836d9021461032157806391d14854146103295780639e4a88e11461033c57600080fd5b806336568abe1161015757806336568abe146102645780633f4ba83a14610277578063485cc9551461027f5780634cbceb2d14610292578063526d81f61461029a57806358031d12146102a25780635c975abb146102b55780636acab9da146102c057600080fd5b806301ffc9a7146101aa578063097616a3146101d257806323b872dd146101e7578063248a9ca3146101fa5780632e1a7d4d1461022b5780632f2ff15d1461023e578063338744bc14610251575b600080fd5b6101bd6101b83660046130f3565b6103b6565b60405190151581526020015b60405180910390f35b6101e56101e0366004612f88565b6103ed565b005b6101bd6101f5366004612fc0565b610583565b61021d6102083660046130b7565b60009081526065602052604090206001015490565b6040519081526020016101c9565b6101e56102393660046130b7565b61067c565b6101e561024c3660046130cf565b6106e2565b6101e561025f366004613038565b61070c565b6101e56102723660046130cf565b6107fd565b6101e5610877565b6101e561028d366004613000565b6108b5565b6101e5610b72565b6101e56110b6565b6101e56102b03660046130b7565b61116d565b60975460ff166101bd565b6101bd6102ce366004613038565b6111d2565b61021d611246565b6101e56102e9366004613063565b6113fc565b6101c454610302906001600160a01b031681565b6040516101c991906131be565b6101e5611455565b61021d6101c35481565b6101e5611491565b6101bd6103373660046130cf565b6114c5565b6101e56114f0565b61021d600081565b6101e561035a3660046130b7565b611739565b6101bd611963565b6101e5611982565b6101e561037d3660046130cf565b611a17565b61021d6000805160206136e783398151915281565b61021d60008051602061372783398151915281565b61021d6101c55481565b60006001600160e01b03198216637965db0b60e01b14806103e757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff161580801561040d5750600054600160ff909116105b806104275750303b158015610427575060005460ff166001145b61044c5760405162461bcd60e51b8152600401610443906132e9565b60405180910390fd5b6000805460ff19166001179055801561046f576000805461ff0019166101001790555b6001600160a01b0382166104c55760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610443565b6104cd611a3c565b6104d5611a63565b6104dd611a96565b6104f56000805160206136e783398151915283611ac4565b61050d60008051602061372783398151915283611ac4565b6105336000805160206137278339815191526000805160206136e7833981519152611ace565b61054b6000805160206136e783398151915280611ace565b801561057f576000805461ff0019169055604051600181526000805160206137078339815191529060200160405180910390a15b5050565b6101c45460009061059c906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b0316146105cc5760405162461bcd60e51b815260040161044390613337565b6105d4611b9b565b60006105e1858585611be1565b9050806106275760405162461bcd60e51b81526020600482015260146024820152731554d110c8151c985b9cd9995c8819985a5b195960621b6044820152606401610443565b836001600160a01b0316856001600160a01b03167f422971e1d1a7c8b68372f65fe1426aef054f0c6290124a929c843c5c019521d68560405161066c91815260200190565b60405180910390a3949350505050565b610684611b9b565b61068c611ce9565b600081116106ac5760405162461bcd60e51b81526004016104439061338c565b6101c554156106bd576106bd611d43565b60006106c882611de3565b90506106d48282611e0c565b506106df600160c955565b50565b6000828152606560205260409020600101546106fd8161207e565b6107078383612088565b505050565b6101c454610722906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b0316146107525760405162461bcd60e51b815260040161044390613337565b61075a611b9b565b600081131561078957600061076e8261210e565b6101c35490915061077f9082612126565b6101c355506107b6565b600061079f61079a836000196135bf565b61210e565b6101c3549091506107b09082612132565b6101c355505b816001600160a01b03167f8c23a9a70a8448cfed7aae767d71bd68857b79de2d189ee6a770619ada8b857a826040516107f191815260200190565b60405180910390a25050565b6001600160a01b038116331461086d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610443565b61057f828261213e565b61088f600080516020613727833981519152336114c5565b6108ab5760405162461bcd60e51b815260040161044390613255565b6108b36121a5565b565b600054610100900460ff16158080156108d55750600054600160ff909116105b806108ef5750303b1580156108ef575060005460ff166001145b61090b5760405162461bcd60e51b8152600401610443906132e9565b6000805460ff19166001179055801561092e576000805461ff0019166101001790555b6001600160a01b0383161580159061094e57506001600160a01b03821615155b6109ad5760405162461bcd60e51b815260206004820152602a60248201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6044820152697420626520656d70747960b01b6064820152608401610443565b6109b6836103ed565b6101c480546001600160a01b0319166001600160a01b0384161790556109da6121f1565b6101c3556101c4546000906109f7906001600160a01b03166121ff565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3257600080fd5b505afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a919061311b565b5060405163095ea7b360e01b81526000906001600160a01b0383169063095ea7b390610a9e903090600019906004016131d2565b602060405180830381600087803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af09190613097565b905080610b385760405162461bcd60e51b81526020600482015260166024820152754661696c656420746f20617070726f7665205553444360501b6044820152606401610443565b50508015610707576000805461ff0019169055604051600181526000805160206137078339815191529060200160405180910390a1505050565b610b7a611963565b610b965760405162461bcd60e51b815260040161044390613451565b6101c55415610ba757610ba7611491565b60975460ff16610bb957610bb9611455565b6101c4547f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69060008051602061372783398151915290610c01906001600160a01b031661220a565b604051631b2b455f60e11b8152600481018490523060248201526001600160a01b0391909116906336568abe90604401600060405180830381600087803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b50506101c454610c7a92506001600160a01b0316905061220a565b604051631b2b455f60e11b8152600481018390523060248201526001600160a01b0391909116906336568abe90604401600060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b50506101c45460009250610cf591506001600160a01b0316612215565b6101c454909150600090610d11906001600160a01b03166121ff565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d3c91906131be565b60206040518083038186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c919061311b565b90506000610d9b308484611be1565b905080610e055760405162461bcd60e51b815260206004820152603260248201527f4661696c656420746f207472616e7366657220555344432062616c616e6365206044820152711d1bc81d1a19481cd95b9a5bdc881c1bdbdb60721b6064820152608401610443565b604051733d9819210a31b4961b30ef54be2aed79b9c9cd3b90600090610e2f9030906024016131be565b60408051601f198184030181529181526020820180516001600160e01b03166374d7814960e11b179052519091506060906001600160a01b03841690610e76908490613133565b6000604051808303816000865af19150503d8060008114610eb3576040519150601f19603f3d011682016040523d82523d6000602084013e610eb8565b606091505b50909450905083610f025760405162461bcd60e51b815260206004820152601460248201527304661696c656420746f20636c61696d20434f4d560641b6044820152606401610443565b60405173c00e94cb662c3520282e6f5717214004a7f2688890610f299030906024016131be565b60408051601f198184030181529181526020820180516001600160e01b03166370a0823160e01b179052519093506001600160a01b03821690610f6d908590613133565b6000604051808303816000865af19150503d8060008114610faa576040519150601f19603f3d011682016040523d82523d6000602084013e610faf565b606091505b5090955091506000610fc2836020015190565b90508781604051602401610fd79291906131d2565b60408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052519094506001600160a01b0383169061101b908690613133565b6000604051808303816000865af19150503d8060008114611058576040519150601f19603f3d011682016040523d82523d6000602084013e61105d565b606091505b509096509250856110aa5760405162461bcd60e51b815260206004820152601760248201527604661696c656420746f207472616e7366657220434f4d5604c1b6044820152606401610443565b50505050505050505050565b600054610100900460ff16158080156110d65750600054600160ff909116105b806110f05750303b1580156110f0575060005460ff166001145b61110c5760405162461bcd60e51b8152600401610443906132e9565b6000805460ff19166001179055801561112f576000805461ff0019166101001790555b611137611a63565b80156106df576000805461ff0019169055604051600181526000805160206137078339815191529060200160405180910390a150565b611175611b9b565b61117d611ce9565b6000811161119d5760405162461bcd60e51b81526004016104439061338c565b6101c554156111ae576111ae611d43565b60006111b98261222d565b9050816111c68282611e0c565b50506106df600160c955565b6101c4546000906111eb906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b03161461121b5760405162461bcd60e51b815260040161044390613337565b611223611b9b565b6101c5541561123457611234611d43565b61123f308484610583565b9392505050565b6101c4546000908190611261906001600160a01b0316612251565b90506113f6816001600160a01b031663a6f4487e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d7919061311b565b6113f0836001600160a01b031663ed80c8506040518163ffffffff1660e01b815260040160206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b919061311b565b6101c4546113ea90611365906001600160a01b03166121ff565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161139091906131be565b60206040518083038186803b1580156113a857600080fd5b505afa1580156113bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e0919061311b565b6101c55490612126565b90612126565b90612132565b91505090565b6101c454611412906001600160a01b0316611b19565b6001600160a01b0316336001600160a01b0316146114425760405162461bcd60e51b815260040161044390613337565b61144a611b9b565b61070783838361225c565b61146d600080516020613727833981519152336114c5565b6114895760405162461bcd60e51b815260040161044390613255565b6108b36123e3565b611499611963565b6114b55760405162461bcd60e51b815260040161044390613451565b6114bd611b9b565b6108b3611d43565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6114f8611963565b6115145760405162461bcd60e51b815260040161044390613451565b61151c611b9b565b6101c454600090611535906001600160a01b03166121ff565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161156591906131be565b60206040518083038186803b15801561157d57600080fd5b505afa158015611591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b5919061311b565b6101c4549091506000906115d1906001600160a01b0316612420565b90506000836001600160a01b031663095ea7b383856040518363ffffffff1660e01b81526004016116039291906131d2565b602060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116559190613097565b9050806116745760405162461bcd60e51b81526004016104439061340e565b61167e828461242b565b6101c454611694906001600160a01b03166121ff565b6001600160a01b031663095ea7b38360006040518363ffffffff1660e01b81526004016116c29291906131d2565b602060405180830381600087803b1580156116dc57600080fd5b505af11580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117149190613097565b9050806117335760405162461bcd60e51b81526004016104439061340e565b50505050565b611741611b9b565b8061174b81612586565b6117675760405162461bcd60e51b8152600401610443906132a1565b61176f611ce9565b600082116117bf5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610443565b60006117ca83611de3565b905060006117da826113ea61260d565b90506117e581612696565b61184a5760405162461bcd60e51b815260206004820152603060248201527f4465706f73697420776f756c64207075742074686520506f6f6c206f7665722060448201526f3a3432903a37ba30b6103634b6b4ba1760811b6064820152608401610443565b604080518581526020810184905233917f0b05f0d1cd0819f155b8a61f60baf7767c1ee49d04aeaab701df236140eb93f9910160405180910390a26000611892333087611be1565b9050806118e15760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f207472616e7366657220666f72206465706f73697400006044820152606401610443565b6101c4546118f7906001600160a01b031661220a565b6001600160a01b031663449a52f833856040518363ffffffff1660e01b81526004016119249291906131d2565b600060405180830381600087803b15801561193e57600080fd5b505af1158015611952573d6000803e3d6000fd5b5050505050505061057f600160c955565b600061197d6000805160206136e7833981519152336114c5565b905090565b61198a611963565b6119a65760405162461bcd60e51b815260040161044390613451565b6101c4546119bc906001600160a01b0316612732565b6101c480546001600160a01b0319166001600160a01b0392909216918217905560405133917f8d003bc2e3965bd9d92389a8ae0ef8c601fa211ba9378150dde7dc3cf38c3a3691611a0d91906131be565b60405180910390a2565b600082815260656020526040902060010154611a328161207e565b610707838361213e565b600054610100900460ff166108b35760405162461bcd60e51b8152600401610443906133c3565b600054610100900460ff16611a8a5760405162461bcd60e51b8152600401610443906133c3565b6097805460ff19169055565b600054610100900460ff16611abd5760405162461bcd60e51b8152600401610443906133c3565b600160c955565b61057f8282612088565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b03821663b93f9b0a60035b6040518263ffffffff1660e01b8152600401611b4b91815260200190565b60206040518083038186803b158015611b6357600080fd5b505afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190612fa4565b60975460ff16156108b35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610443565b60006001600160a01b038316611c395760405162461bcd60e51b815260206004820152601a60248201527f43616e27742073656e6420746f207a65726f20616464726573730000000000006044820152606401610443565b6101c454600090611c52906001600160a01b03166121ff565b6040516323b872dd60e01b81526001600160a01b038781166004830152868116602483015260448201869052919250908216906323b872dd90606401602060405180830381600087803b158015611ca857600080fd5b505af1158015611cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce09190613097565b95945050505050565b600260c9541415611d3c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610443565b600260c955565b6101c454600090611d5c906001600160a01b0316612420565b90506106df81826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d8e91906131be565b60206040518083038186803b158015611da657600080fd5b505afa158015611dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dde919061311b565b61274a565b60006103e76101c354611e06611df76121f1565b611e0086612a9c565b90612ab7565b90612ac3565b81611e1681612586565b611e325760405162461bcd60e51b8152600401610443906132a1565b6101c454600090611e4b906001600160a01b031661220a565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611e7b91906131be565b60206040518083038186803b158015611e9357600080fd5b505afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb919061311b565b905080841115611f3d5760405162461bcd60e51b815260206004820152603760248201527f416d6f756e74207265717565737465642069732067726561746572207468616e604482015276207768617420746869732061646472657373206f776e7360481b6064820152608401610443565b6101c454600090611f6190611f5a906001600160a01b0316612acf565b8790612ac3565b90506000611f6f8783612132565b604080518281526020810185905291925033917f2d4d49c3e017b8235c908cbaa83a2431a08f3b950712696ece2088964fd399f0910160405180910390a26000611fba303384611be1565b9050806120095760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f207472616e7366657220666f72207769746864726177006044820152606401610443565b612014308433612b51565b60405163079cc67960e41b81526001600160a01b038616906379cc6790906120429033908b906004016131d2565b600060405180830381600087803b15801561205c57600080fd5b505af1158015612070573d6000803e3d6000fd5b505050505050505050505050565b6106df8133612c14565b61209282826114c5565b61057f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556120ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006103e761211b61260d565b611e06611df76121f1565b600061123f828461349c565b600061123f8284613661565b61214882826114c5565b1561057f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6121ad612c6d565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516121e791906131be565b60405180910390a1565b600061197d6012600a613517565b60006103e782612cb6565b60006103e782612cce565b60006001600160a01b03821663b93f9b0a600e611b2d565b60006103e761224c61223d6121f1565b6101c354611e06908690612ab7565b612ce6565b60006103e782611b19565b6101c45460009061228090612279906001600160a01b0316612d05565b8490612ac3565b9050600061228e8483612132565b9050600061229b8261210e565b6101c3549091506122ac9082612126565b6101c35581156122fb5760408051838152602081018590526001600160a01b038816917f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e2161910160405180910390a25b831561234557856001600160a01b03167f8295ad220549851bab232c2a7ae2e3c53a63d2294602bc85f8d8af108778a37e8560405161233c91815260200190565b60405180910390a25b821561235657612356868488612b51565b6001600160a01b03861630146123db57600061237c87306123778887612126565b611be1565b9050806123d95760405162461bcd60e51b815260206004820152602560248201527f4661696c656420746f20636f6c6c656374207072696e636970616c20726570616044820152641e5b595b9d60da1b6064820152608401610443565b505b505050505050565b6123eb611b9b565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121da3390565b60006103e782612d1d565b6101c554156124995760405162461bcd60e51b815260206004820152603460248201527f43616e6e6f74207377656570207768656e20776520616c72656164792068617660448201527365206120636f6d706f756e642062616c616e636560601b6064820152608401610443565b806124b65760405162461bcd60e51b81526004016104439061321e565b60405163140e25ad60e31b8152600481018290526000906001600160a01b0384169063a0712d6890602401602060405180830381600087803b1580156124fb57600080fd5b505af115801561250f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612533919061311b565b9050801561257e5760405162461bcd60e51b815260206004820152601860248201527714ddd9595c081d1bc818dbdb5c1bdd5b990819985a5b195960421b6044820152606401610443565b506101c55550565b6101c454604051631f8ac6cb60e31b8152600060048201819052916001600160a01b03169063fc5636589060240160206040518083038186803b1580156125cc57600080fd5b505afa1580156125e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612604919061311b565b90911115919050565b6101c454600090612626906001600160a01b031661220a565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d919061311b565b6101c454604051631f8ac6cb60e31b81526001600482015260009161271f916001600160a01b039091169063fc5636589060240160206040518083038186803b1580156126e257600080fd5b505afa1580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a919061311b565b612a9c565b61272a61223d6121f1565b111592915050565b60006001600160a01b03821663b93f9b0a600b611b2d565b6101c554806127925760405162461bcd60e51b8152602060048201526014602482015273139bc8199d5b991cc81bdb8818dbdb5c1bdd5b9960621b6044820152606401610443565b816127af5760405162461bcd60e51b81526004016104439061321e565b6101c4546000906127c8906001600160a01b03166121ff565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016127f891906131be565b60206040518083038186803b15801561281057600080fd5b505afa158015612824573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612848919061311b565b90506000856001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561288757600080fd5b505af115801561289b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bf919061311b565b905060006128cd8287612d35565b60405163db006a7560e01b8152600481018890529091506000906001600160a01b0389169063db006a7590602401602060405180830381600087803b15801561291557600080fd5b505af1158015612929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294d919061311b565b90506000856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161297d91906131be565b60206040518083038186803b15801561299557600080fd5b505afa1580156129a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cd919061311b565b90508115612a1d5760405162461bcd60e51b815260206004820152601a60248201527f53776565702066726f6d20636f6d706f756e64206661696c65640000000000006044820152606401610443565b82612a288287612132565b14612a705760405162461bcd60e51b8152602060048201526018602482015277155b995e1c1958dd1959081c995919595b48185b5bdd5b9d60421b6044820152606401610443565b6000612a7c8489612132565b9050612a8a3082600061225c565b505060006101c5555050505050505050565b60006103e7612aa9612d6e565b611e06612ab46121f1565b85905b600061123f8284613642565b600061123f82846134b4565b60006001600160a01b03821663fc56365860045b6040518263ffffffff1660e01b8152600401612b0191815260200190565b60206040518083038186803b158015612b1957600080fd5b505afa158015612b2d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e7919061311b565b806001600160a01b03167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb83604051612b8c91815260200190565b60405180910390a26101c454600090612bb9908590612bb3906001600160a01b0316612d7c565b85611be1565b9050806117335760405162461bcd60e51b815260206004820152602360248201527f52657365727665207472616e7366657220776173206e6f742073756363657373604482015262199d5b60ea1b6064820152608401610443565b612c1e82826114c5565b61057f57612c2b81612d94565b612c36836020612da6565b604051602001612c4792919061314f565b60408051601f198184030181529082905262461bcd60e51b8252610443916004016131eb565b60975460ff166108b35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610443565b60006001600160a01b03821663b93f9b0a6005611b2d565b60006001600160a01b03821663b93f9b0a6004611b2d565b60006103e7612cfe612cf6612d6e565b611e066121f1565b8390612ac3565b60006001600160a01b03821663fc5636586003612ae3565b60006001600160a01b03821663b93f9b0a600a611b2d565b600060066008611ce06064611e0683612d4f86601261349c565b612d599190613661565b612d6490600a613517565b611e06888a612ab7565b600061197d6006600a613517565b60006001600160a01b03821663b93f9b0a6006611b2d565b60606103e76001600160a01b03831660145b60606000612db5836002613642565b612dc090600261349c565b67ffffffffffffffff811115612de657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e10576020820181803683370190505b509050600360fc1b81600081518110612e3957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e7657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612e9a846002613642565b612ea590600161349c565b90505b6001811115612f39576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612ee757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612f0b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612f32816136a4565b9050612ea8565b50831561123f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610443565b600060208284031215612f99578081fd5b813561123f816136d1565b600060208284031215612fb5578081fd5b815161123f816136d1565b600080600060608486031215612fd4578182fd5b8335612fdf816136d1565b92506020840135612fef816136d1565b929592945050506040919091013590565b60008060408385031215613012578182fd5b823561301d816136d1565b9150602083013561302d816136d1565b809150509250929050565b6000806040838503121561304a578182fd5b8235613055816136d1565b946020939093013593505050565b600080600060608486031215613077578283fd5b8335613082816136d1565b95602085013595506040909401359392505050565b6000602082840312156130a8578081fd5b8151801515811461123f578182fd5b6000602082840312156130c8578081fd5b5035919050565b600080604083850312156130e1578182fd5b82359150602083013561302d816136d1565b600060208284031215613104578081fd5b81356001600160e01b03198116811461123f578182fd5b60006020828403121561312c578081fd5b5051919050565b60008251613145818460208701613678565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351613181816017850160208801613678565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131b2816028840160208801613678565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602081526000825180602084015261320a816040850160208701613678565b601f01601f19169190910160400192915050565b6020808252601e908201527f416d6f756e7420746f2073776565702063616e6e6f74206265207a65726f0000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b60208082526028908201527f416d6f756e74206973206f76657220746865207065722d7472616e73616374696040820152671bdb881b1a5b5a5d60c21b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526035908201527f4f6e6c792074686520637265646974206465736b20697320616c6c6f776564206040820152743a379031b0b636103a3434b990333ab731ba34b7b760591b606082015260800190565b6020808252601c908201527f4d757374207769746864726177206d6f7265207468616e207a65726f00000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526023908201527f4661696c656420746f20617070726f7665205553444320666f7220636f6d706f6040820152621d5b9960ea1b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b600082198211156134af576134af6136bb565b500190565b6000826134cf57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561350f5781600019048211156134f5576134f56136bb565b8085161561350257918102915b93841c93908002906134d9565b509250929050565b600061123f838360008261352d575060016103e7565b8161353a575060006103e7565b8160018114613550576002811461355a57613576565b60019150506103e7565b60ff84111561356b5761356b6136bb565b50506001821b6103e7565b5060208310610133831016604e8410600b8410161715613599575081810a6103e7565b6135a383836134d4565b80600019048211156135b7576135b76136bb565b029392505050565b60006001600160ff1b03818413828413808216868404861116156135e5576135e56136bb565b600160ff1b84871282811687830589121615613603576136036136bb565b85871292508782058712848416161561361e5761361e6136bb565b87850587128184161615613634576136346136bb565b505050929093029392505050565b600081600019048311821515161561365c5761365c6136bb565b500290565b600082821015613673576136736136bb565b500390565b60005b8381101561369357818101518382015260200161367b565b838111156117335750506000910152565b6000816136b3576136b36136bb565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146106df57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212200374c6e758a764be18f8d189b4b192ce5626dcfd8ba2b492564336e4f1e313fd64736f6c63430008040033",
  "devdoc": {
    "author": "Doberman",
    "kind": "dev",
    "methods": {
      "collectInterestAndPrincipal(address,uint256,uint256)": {
        "params": {
          "from": "The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.",
          "interest": "the interest amount of USDC to move to the Pool",
          "principal": "the principal amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function."
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "The amount of USDC to deposit"
        }
      },
      "drawdown(address,uint256)": {
        "params": {
          "amount": "the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.",
          "to": "The address that the USDC should be moved to"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "_config": "The address of the DobermanConfig contract",
          "owner": "The address of who should have the \"OWNER_ROLE\" of this contract"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.",
          "from": "The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.",
          "to": "The address that the USDC should be moved to"
        }
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256)": {
        "params": {
          "usdcAmount": "The amount of USDC to withdraw"
        }
      },
      "withdrawInFidu(uint256)": {
        "params": {
          "fiduAmount": "The amount of USDC to withdraw in terms of fidu shares"
        }
      }
    },
    "title": "Doberman's Pool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectInterestAndPrincipal(address,uint256,uint256)": {
        "notice": "Collects `interest` USDC in interest and `principal` in principal from `from` and sends it to the Pool.  This also increases the share price accordingly. A portion is sent to the Doberman Reserve address"
      },
      "deposit(uint256)": {
        "notice": "Deposits `amount` USDC from msg.sender into the Pool, and returns you the equivalent value of FIDU tokens"
      },
      "drawdown(address,uint256)": {
        "notice": "Moves `amount` USDC from the pool, to `to`. This is similar to transferFrom except we sweep any balance we have from compound first and recognize interest. Meant to be called only by the credit desk on drawdown"
      },
      "initialize(address,address)": {
        "notice": "Run only once, on initialization"
      },
      "sweepFromCompound()": {
        "notice": "Moves any USDC from Compound back to the Pool, and recognizes interest earned. This is done automatically on drawdown or withdraw, but can be called manually if necessary. Requirements:  - The caller must be an admin."
      },
      "sweepToCompound()": {
        "notice": "Moves any USDC still in the Pool to Compound, and tracks the amount internally. This is done to earn interest on latent funds until we have other borrowers who can use it. Requirements:  - The caller must be an admin."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Moves `amount` USDC from `from`, to `to`."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws USDC from the Pool to msg.sender, and burns the equivalent value of FIDU tokens"
      },
      "withdrawInFidu(uint256)": {
        "notice": "Withdraws USDC (denominated in FIDU terms) from the Pool to msg.sender"
      }
    },
    "notice": "Main entry point for LP's (a.k.a. capital providers)  Handles key logic for depositing and withdrawing funds from the Pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 588,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 591,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4964,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5544,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 771,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 876,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 891,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 949,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15949,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15953,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15957,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15961,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13731,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "sharePrice",
        "offset": 0,
        "slot": "451",
        "type": "t_uint256"
      },
      {
        "astId": 22090,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "config",
        "offset": 0,
        "slot": "452",
        "type": "t_contract(DobermanConfig)20001"
      },
      {
        "astId": 22099,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "compoundBalance",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(DobermanConfig)20001": {
        "encoding": "inplace",
        "label": "contract DobermanConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/protocol/core/Pool.sol:Pool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/protocol/core/Pool.sol:Pool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
